	#
	# This file was automatically generated by the ncc compiler.
	# Edited by Abdul Bahajaj

	.data;

	# Reserve the first heap word so we can use address 0 as null
	.u64 0;

__EVENT_LOOP_ENABLED__:
	.u8 0;

	.align 8;
FRAME_HEIGHT:
	.u64 800;

	.align 8;
FRAME_WIDTH:
	.u64 800;

	.align 8;
POINT_SIZE:
	.u64 1;

	.align 8;
__CONST_STR_0__:
	.stringz "Basic program";

	.align 4;
frame_buffer:
	.zero 2560000;

	##############################################################################

	.code;

	# call the main function and then exit
	call main, 0;
	push __EVENT_LOOP_ENABLED__;
	load_u8;
	jnz __ret_to_event_loop__;
	exit;
__ret_to_event_loop__:
	ret;

	#
	# void enable_event_loop()
	#
enable_event_loop:
	push __EVENT_LOOP_ENABLED__;
	push 1;
	store_u8;
	push 0;
	ret;

	#
	# void draw_point(u64 x, u64 y, u64 color)
	#
draw_point:
	push 0;
	push 0;
	push 0;
	push 0;
	get_arg 0;
	push POINT_SIZE;
	load_u64;
	mul_u64;
	set_arg 0;
	get_arg 1;
	push POINT_SIZE;
	load_u64;
	mul_u64;
	set_arg 1;
	get_arg 0;
	push POINT_SIZE;
	load_u64;
	add_u64;
	set_local 0;
	get_arg 1;
	push POINT_SIZE;
	load_u64;
	add_u64;
	set_local 1;
	get_local 0;
	push FRAME_WIDTH;
	load_u64;
	gt_u64;
	jz _if_false_0;
	push 0;
	set_arg 0;
	push POINT_SIZE;
	load_u64;
	set_local 0;
_if_false_0:
	get_local 1;
	push FRAME_HEIGHT;
	load_u64;
	gt_u64;
	jz _if_false_1;
	push 0;
	set_arg 1;
	push POINT_SIZE;
	load_u64;
	set_local 1;
_if_false_1:
_for_loop_2:
	get_arg 0;
	get_local 0;
	lt_u64;
	jz _for_break_4;
	get_arg 1;
	set_local 2;
_for_loop_5:
	get_local 2;
	get_local 1;
	lt_u64;
	jz _for_break_7;
	push frame_buffer;
	push FRAME_WIDTH;
	load_u64;
	get_local 2;
	mul_u64;
	get_arg 0;
	add_u64;
	push 4;
	mul_u64;
	add_u64;
	set_local 3;
	get_local 3;
	get_arg 2;
	store_u32;
_for_cont_6:
	get_local 2;
	push 1;
	add_u64;
	dup;
	set_local 2;
	pop;
	jmp _for_loop_5;
_for_break_7:
_for_cont_3:
	get_arg 0;
	push 1;
	add_u64;
	dup;
	set_arg 0;
	pop;
	jmp _for_loop_2;
_for_break_4:
	push 0;
	ret;

	#
	# void clear_all()
	#
clear_all:
	push frame_buffer;
	push 0;
	push 2560000;
	syscall memset;
	push 0;
	push frame_buffer;
	syscall window_draw_frame;
	push 0;
	ret;

	#
	# void delay(u64 time)
	#
delay:
	get_arg 0;
	push basic;
	syscall time_delay_cb;
	push 0;
	ret;

	#
	# i32 main()
	#
main:
	push FRAME_WIDTH;
	load_u64;
	push FRAME_HEIGHT;
	load_u64;
	push __CONST_STR_0__;
	push 0;
	syscall window_create;
	pop;
	call enable_event_loop, 0;
	pop;
	call basic, 0;
	pop;
	push 0;
	push frame_buffer;
	syscall window_draw_frame;
	push 0;
	ret;

	#
	# i32 basic()
	#
basic:
